summary(preProc)
View(testing)
testPC <- predict(preProc, testing[,-1])
View(training_mod)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(training_mod$diagnosis~., method = "glm", data=trainPC)
install.packages("e1071")
atr(preProc)
str(preProc)
head(preProc)
modelFit <- train(training_mod$diagnosis~., method = "glm", data=trainPC)
trainPC <‐ predict(preProc,training_mod)
modelFit <- train(training_mod$diagnosis~., method = "glm", data=trainPC)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(training_mod$diagnosis~., method = "glm", data=trainPC)
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training_mod[,-1], method = "pca", pcaComp =9)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, testing[,-1])
testing_mod <-testing[,grep("IL", names(testing))]
testing_mod <- subset(testing_mod, select=-c(TRAIL_R3))
testing_mod <- cbind(testing$diagnosis, testing_mod)
colnames(testing_mod)[1] <- c("diagnosis")
testPC <- predict(preProc, testing_mod[,-1])
confusionMatrix(testing_mod$diagnosis,predict(modelFit, testPC))
preProc <- preProcess(training_mod[,-1], method = "pca", pcaComp =12)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, testing_mod[,-1])
confusionMatrix(testing_mod$diagnosis,predict(modelFit, testPC))
preProc <- preProcess(training_mod[,-1], method = "pca", pcaComp =5)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, testing_mod[,-1])
confusionMatrix(testing_mod$diagnosis,predict(modelFit, testPC))
preProc <- preProcess(log10(training_mod[,-1]+1), method = "pca", pcaComp =5)
preProc <- preProcess(training_mod[,-1], method = "pca", pcaComp =10)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, testing_mod[,-1])
confusionMatrix(testing_mod$diagnosis,predict(modelFit, testPC))
preProc <- preProcess(training_mod[,-1], method = "pca", thresh=0.9)
trainPC <‐ predict(preProc,training_mod[,-1])
modelFit <- train(x=trainPC,y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, testing_mod[,-1])
confusionMatrix(testing_mod$diagnosis,predict(modelFit, testPC))
preProc$numComp
?predict
View(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_mod <- training[, grep("IL", names(training))]
training_mod <- subset(training_mod, select=-c(TRAIL_R3))
training_mod <- cbind(training$diagnosis, training_mod)
colnames(training_mod)[1] <- c("diagnosis")
test_mod <-testing[, grep("IL", names(testing))]
test_mod <-subset(test_mod, select = -c(TRAIL_R3))
test_mod <- cbind(testing$diagnosis, test_mod)
preProc <- preProcess(training_mod[,-1], method ="pca", thresh = 0.8)
trainPC <- predict(preProc, training[,-1])
PCAfit <- train(training_mod$diagnosis~., method = "glm", data=trainPC)
PCAfit <- train(x=trainPC, y=training_mod$diagnossis, method = "glm", data=trainPC)
PCAfit <- train(x=trainPC, y=training_mod$diagnosis, method = "glm", data=trainPC)
trainPC <- predict(preProc, training_mod[,-1])
PCAfit <- train(x=trainPC, y=training_mod$diagnosis, method = "glm", data=trainPC)
View(trainPC)
View(training_mod)
PCAfit <- train(x=training_mod, y=training_mod$diagnosis, method = "glm", data=trainPC)
PCAfit <- train(x=trainPC, y=training_mod$diagnosis, method = "glm")
testPC <- predict(preProc, test_mod[,-1])
confusionMatrix(test_mod$`testing$diagnosis`, predict(PCAfit, testPC) )
colnames(test_mod)[1] <- c("diagnosis")
?preProcess
preObj <- preProcess(training_mod[,-1])
trainObj <- predict(preObj, training_mod[,-1])
modelFit <- train(x=trainObj, y= training_mod$diagnosis, method="glm")
testObj <- predict(preObj, test_mod[,-1])
confusionMatrix(test_mod$diagnosis, predict(modelFit,testOjb))
confusionMatrix(test_mod$diagnosis, predict(modelFit,testObj))
confusionMatrix(test_mod$diagnosis, predict(modelFit,testObj))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.6, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1), method="pca", thresh=0.9)
summary(preProc)
preProc$dim
preProc.numComp
preProc$numComp
preProc$data
preProc$method
View(training)
args(trainControl)
preProc <- preProcess(log10(spam[,-58]+1),method="pca", pcaComp=2)
preProc
summary(preProc)
spamPC <-predict(preProc, log10(spam[,-58]+1))
View(spamPC)
View(spam)
preProc <- preProcess(log10(training[,-58]+1),method="pca", pcaComp=2)
trainPC <- predict(preProc, log10(training[,-58]+1))
View(trainPC)
modelfit1 <- train(training~.,method="glm", data=training)
modelfit1 <- train(type~.,method="glm", data=training)
summary(modelfit1)
warnings()
confusionMatrix((modelfit1)
confusionMatrix(testing$type, predict(modelfit1, testing))
modelfit2 <- train(training$type.~,method="glm", data=trainPC)
modelfit2 <- train(training$type~., method="glm", data=trainPC)
modelfit2 <- train(training$type.~,method="glm", data=trainPC)
modelfit2 <- train(training$type~.,method="glm", data=trainPC)
modelFit <- train(x = trainPC, y = training$type,method="glm")
testPC <-predict(preProc, log10(testing[,-58]+1))
View(testing)
View(testPC)
confusionMatrix(testing$type, predict(modelFit,testPC))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
?createDataPartition
View(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
install.packages("rattle")
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
remove.packages("rattle")
remove.packages("rattle", lib= GTK2+)
remove.packages("rattle", lib= GTK2)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
install.packages("Rcpp")
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
install.packages("rlang")
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
install.packages("dplyr")
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
predicted
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
library(rattle)
install.packages("rattle")
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question1Code.R')
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
olive=olive[,-1]
View(olive)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question3Code.R')
View(olive)
class(olive$Area)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question3Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question3Code.R')
olive$Area
View(olive)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question3Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question3Code.R')
prediction
View(new)
?train
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace=F)
trainSA = SAheart[train,]
testSA =SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace=F)
trainSA = SAheart[train,]
testSA =SAheart[-train,]
set.seed(13234)
View(trainSA)
?SAheart
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
class(trainSA$chd)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
pred_training
pred_test
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
out_train <- missClass(trainSA$chd,pred_training)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
out_train <- missClass(trainSA$chd,pred_training)
out_test<- missClass(testSA$chd, pred_test)
out_train
out_test
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(trainSA)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
library(ElemStatLearn)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace=F)
trainSA = SAheart[train,]
testSA =SAheart[-train,]
trainSA$chd <- as.factor(trainSA$chd)
testSA$chd <- as.factor(testSA$chd)
set.seed(13234)
fitMod <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial",data=trainSA)
pred_training <- predict(fitMod,trainSA)
pred_test <- predict(fitMod, testSA)
trainSA$chd <- as.numeric(trainSA$chd)
testSA$chd <- as.numeric(testSA$chd)
pred_training <- as.numeric(pred_training)
pred_test <- as.numeric(pred_test)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
train_misclass <- missClass(trainSA$chd, pred_training)
test_misclass <- missClass(testSA$chd, pred_test)
View(testSA)
View(trainSA)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(trainSA)
View(SAheart)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(testSA)
View(SAheart)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(SAheart)
View(testSA)
View(SAheart)
View(testSA)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(testSA)
View(SAheart)
View(trainSA)
View(testSA)
View(SAheart)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(testSA)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question4Code.R')
View(testSA)
View(trainSA)
View(SAheart)
View(testSA)
View(trainSA)
View(testSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
y
View(vowel.train)
View(vowel.test)
?randomForest
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
?varImp
varImp(modfit)
modfit <- randomForest(y~., data=vowel.train)
varImp(modfit)
View(vowel.test)
prediction <- predict(modfit, vowel.test[,-1])
varImp(prediction)
prediction <-
prediction
?randomForest
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
modfit
importance(modfit)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
importance_var
View(importance_var)
prediction <- predict(modfit, vowel.test[,-1])
import <- importance(prediction)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
View(importance_var)
?varImp
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
View(importance_var)
source('~/JHU Coursera Data Science course/Course 8 Week 3/Quiz_question5Code.R')
View(vowel.train)
View(importance_var)
order(varImp(modfit), decreasing = T
order(varImp(modfit), decreasing = T)
View(vowel.test)
View(importance_var)
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
install.packages("gbm")
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
summary(rf_fit)
rf_fit$finalModel
boost_fit$finalModel
pred1 <- predict(rf_fit, vowel.test[,-1])
pred1
confusionMatrix(vowel.test$y, pred1)
prediction_rf <- predict(rf_fit, vowel.test[,-1])
confusionMatrix(prediction_rf)
confusionMatrix(prediction_rf)
confusionMatrix(vowel.test$y, predict(rf_fit, vowel.test))
boost_accuracy <- confusionMatrix(vowel.test$y, predict(boost_fit, vowel.test)
boost_accuracy <- confusionMatrix(vowel.test$y, predict(boost_fit, vowel.test))
boost_accuracy
?train
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
rf_accuracy
boost_accuracy
comboPred_accuracy
comboPred <- predict(comboModFit, vowel.test)
comboPred_accuracy <- confusionMatrix(vowel.test$y, comboPred)
comboPred_accuracy
rf_accuracy <- confusionMatrix(vowel.test$y, predict(rf_fit, vowel.test))
boost_accuracy <- confusionMatrix(vowel.test$y, predict(boost_fit, vowel.test))
rf_accuracy
boost_accuracy
rf_accuracy <- confusionMatrix(rf_predict, vowel.test)
boost_accuracy <- confusionMatrix(boost_predict, vowel.test)
rf_accuracy <- confusionMatrix(vowel.test, rf_predict)
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
rf_accuracy
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
rf_accuracy
boost_accuracy
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
rf_accuracy
boost_accuracy
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
View(predDF)
View(predDF)
predDF$agree_predict <-(predDF$rf_predict == predDF$boost_predict)
nrow(predDF$agree_predict == TRUE)
nrow(predDF$agree_predict == T)
nrow(predDF$agree_predict == "TRUE")
class(agree_predict)
class(predDF$agree_predict)
sum(predDF$agree_predict, na.rm=TRUE)
?na.rm
?sum
table(predDF$agree_predict)["TRUE"]
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Quiz_Week4_Q1.R')
count_models
count_test
fold Cross Validation in R
R
# load the library
library(caret)
?trainConrol
?trainControl
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
View(grid)
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
print(model)
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
print(model)
?trainControl
summary(model)
model$finalModel
model$finalModel
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
source('~/JHU Coursera Data Science course/Course 8 Week 4/Assignment/Kfold_test.R')
?expand.grid
?trainControl
accuracy(model)
install.packages("leaflet")
library(leaflet)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832, popup ="Toronto (best city on Earth)")
toronto_map
library(leaflet)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city on Earth)")
toronto_map
library(leaflet)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6629, lng=-79.3957,
popup ="Toronto (best city on Earth)")
toronto_map
setwd("~/JHU Coursera Data Science course/Course 9 Week 2")
library(leaflet)
thumbs_up = makeIcon("thumbs_up.jpg",24,24)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6629, lng=-79.3957,
popup ="University of Toronto", icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",24,24)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6629, lng=-79.3957,
popup ="University of Toronto", icon =thumbs_up)
toronto_map
thumbs_up = makeIcon("thumbs_up.png",72,72)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6629, lng=-79.3957,
popup ="University of Toronto", icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",72,72)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6629, lng=-79.3957,
popup ="University of Toronto", icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",72,72)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (Best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",72,72)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",72,72)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",100,100)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",50,50)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",80,80)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
library(leaflet)
thumbs_up = makeIcon("thumbs_up.png",80,80)
toronto_map <- leaflet() %>% addTiles() %>%
addMarkers(lat=43.6532, lng=-79.3832,
popup ="Toronto (best city around)",
icon =thumbs_up)
toronto_map
